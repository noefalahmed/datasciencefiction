{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keras'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-10808f7e7c9a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0m__future__\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mprint_function\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmnist\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'keras'"
     ]
    }
   ],
   "source": [
    "'''Trains a simple convnet on the MNIST dataset.\n",
    "Gets to 99.25% test accuracy after 12 epochs\n",
    "(there is still a lot of margin for parameter tuning).\n",
    "16 seconds per epoch on a GRID K520 GPU.\n",
    "'''\n",
    "\n",
    "from __future__ import print_function\n",
    "import keras\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "from keras import backend as K\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "batch_size = 128\n",
    "num_classes = 10\n",
    "epochs = 3\n",
    "\n",
    "# input image dimensions\n",
    "img_rows, img_cols = 28, 28\n",
    "\n",
    "# the data, split between train and test sets\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "\n",
    "if K.image_data_format() == 'channels_first':\n",
    "    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n",
    "    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n",
    "    input_shape = (1, img_rows, img_cols)\n",
    "else:\n",
    "    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n",
    "    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n",
    "    input_shape = (img_rows, img_cols, 1)\n",
    "\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "print('x_train shape:', x_train.shape)\n",
    "print(x_train.shape[0], 'train samples')\n",
    "print(x_test.shape[0], 'test samples')\n",
    "\n",
    "# convert class vectors to binary class matrices\n",
    "y_train = keras.utils.to_categorical(y_train, num_classes)\n",
    "y_test = keras.utils.to_categorical(y_test, num_classes)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(16, kernel_size=(3, 3),\n",
    "                 activation='relu',\n",
    "                 input_shape=input_shape))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Dense(num_classes, activation='softmax'))\n",
    "\n",
    "model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer=keras.optimizers.Adadelta(),\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "history= model.fit(x_train, y_train,\n",
    "          batch_size=batch_size,\n",
    "          epochs=epochs,\n",
    "          verbose=1,\n",
    "          validation_data=(x_test, y_test))\n",
    "score = model.evaluate(x_test, y_test, verbose=0)\n",
    "print('Test loss:', score[0])\n",
    "print('Test accuracy:', score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keras'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-88d96843a926>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'keras'"
     ]
    }
   ],
   "source": [
    "import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0.]\n",
      " [0. 1. 0.]\n",
      " [0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "print(np.eye(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keras'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-3b574ec13893>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mkeras\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'keras'"
     ]
    }
   ],
   "source": [
    "import keras as k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (60000, 28, 28, 1)\n",
      "60000 train samples\n",
      "10000 test samples\n",
      "WARNING:tensorflow:From F:\\New folder\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From F:\\New folder\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "WARNING:tensorflow:From F:\\New folder\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/3\n",
      "60000/60000 [==============================] - 27s 446us/step - loss: 0.4466 - acc: 0.8558 - val_loss: 0.1355 - val_acc: 0.9576\n",
      "Epoch 2/3\n",
      "60000/60000 [==============================] - 18s 294us/step - loss: 0.1200 - acc: 0.9644 - val_loss: 0.0894 - val_acc: 0.9717\n",
      "Epoch 3/3\n",
      "60000/60000 [==============================] - 18s 295us/step - loss: 0.0880 - acc: 0.9728 - val_loss: 0.0651 - val_acc: 0.9797\n",
      "Test loss: 0.06509129731338471\n",
      "Test accuracy: 0.9797\n"
     ]
    }
   ],
   "source": [
    "'''Trains a simple convnet on the MNIST dataset.\n",
    "Gets to 99.25% test accuracy after 12 epochs\n",
    "(there is still a lot of margin for parameter tuning).\n",
    "16 seconds per epoch on a GRID K520 GPU.\n",
    "'''\n",
    "\n",
    "from __future__ import print_function\n",
    "import keras\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "from keras import backend as K\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "batch_size = 128\n",
    "num_classes = 10\n",
    "epochs = 3\n",
    "\n",
    "# input image dimensions\n",
    "img_rows, img_cols = 28, 28\n",
    "\n",
    "# the data, split between train and test sets\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "\n",
    "if K.image_data_format() == 'channels_first':\n",
    "    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n",
    "    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n",
    "    input_shape = (1, img_rows, img_cols)\n",
    "else:\n",
    "    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n",
    "    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n",
    "    input_shape = (img_rows, img_cols, 1)\n",
    "\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "print('x_train shape:', x_train.shape)\n",
    "print(x_train.shape[0], 'train samples')\n",
    "print(x_test.shape[0], 'test samples')\n",
    "\n",
    "# convert class vectors to binary class matrices\n",
    "y_train = keras.utils.to_categorical(y_train, num_classes)\n",
    "y_test = keras.utils.to_categorical(y_test, num_classes)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv2D(16, kernel_size=(3, 3),\n",
    "                 activation='relu',\n",
    "                 input_shape=input_shape))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Dense(num_classes, activation='softmax'))\n",
    "\n",
    "model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer=keras.optimizers.Adadelta(),\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "history= model.fit(x_train, y_train,\n",
    "          batch_size=batch_size,\n",
    "          epochs=epochs,\n",
    "          verbose=1,\n",
    "          validation_data=(x_test, y_test))\n",
    "score = model.evaluate(x_test, y_test, verbose=0)\n",
    "print('Test loss:', score[0])\n",
    "print('Test accuracy:', score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[[[ 0.13316604,  0.25612712,  0.1708932 ,  0.23264349,\n",
       "            0.4081227 , -0.00369734,  0.25345826, -0.00442866,\n",
       "           -0.13031518,  0.4004527 ,  0.14400333,  0.01875131,\n",
       "           -0.17739765,  0.14622629, -0.22484899,  0.25729474]],\n",
       " \n",
       "         [[ 0.33630648,  0.16482393, -0.00994146,  0.26147056,\n",
       "            0.44077203,  0.19847132,  0.10700923, -0.17181826,\n",
       "           -0.13547742, -0.10436176,  0.17531002, -0.24341434,\n",
       "           -0.16536362,  0.3227159 , -0.02095933,  0.00326348]],\n",
       " \n",
       "         [[ 0.4773408 , -0.20780298,  0.28647426, -0.08869514,\n",
       "            0.43776247, -0.22310187,  0.13063326, -0.18730241,\n",
       "            0.01324545, -0.36467966, -0.2721021 , -0.11974656,\n",
       "           -0.20306736,  0.2132155 ,  0.0939412 , -0.46750453]]],\n",
       " \n",
       " \n",
       "        [[[-0.07585941,  0.18729809, -0.0319526 ,  0.2590525 ,\n",
       "           -0.15075122,  0.12950328,  0.10624994, -0.0341487 ,\n",
       "           -0.18925084,  0.3175748 ,  0.03503422,  0.27080134,\n",
       "           -0.19572842,  0.18008478, -0.05908436,  0.36901507]],\n",
       " \n",
       "         [[ 0.20010836,  0.09381519,  0.08738995,  0.24816793,\n",
       "            0.02162969,  0.26138008,  0.13281058,  0.17421076,\n",
       "            0.02269791, -0.09459153,  0.25266722,  0.00822565,\n",
       "           -0.22380193,  0.22229178,  0.12998343, -0.10543611]],\n",
       " \n",
       "         [[ 0.473236  , -0.2954367 ,  0.3648915 ,  0.04142062,\n",
       "           -0.06949302,  0.17677005,  0.2142962 , -0.1697354 ,\n",
       "           -0.02168106, -0.15910842, -0.35486245,  0.05965512,\n",
       "           -0.07265774,  0.38829508,  0.06893273, -0.4415897 ]]],\n",
       " \n",
       " \n",
       "        [[[-0.1966835 ,  0.23937258,  0.13709085,  0.18574235,\n",
       "           -0.3097861 ,  0.38510764,  0.199076  , -0.01683646,\n",
       "           -0.02942958,  0.24770232,  0.31129363,  0.20949113,\n",
       "            0.25628236, -0.30739474,  0.233423  ,  0.33681223]],\n",
       " \n",
       "         [[ 0.15743347, -0.25384092,  0.04763749,  0.10689101,\n",
       "           -0.47876278,  0.43768224,  0.1714572 , -0.11244971,\n",
       "            0.0576377 , -0.35485604,  0.00289941,  0.07844939,\n",
       "            0.39413008,  0.05539849,  0.21490309,  0.34792024]],\n",
       " \n",
       "         [[ 0.03181607, -0.22985025,  0.39628243, -0.05534835,\n",
       "           -0.3437146 ,  0.47401577,  0.09108053, -0.13630661,\n",
       "           -0.09324652, -0.43840078, -0.03474376,  0.19259527,\n",
       "            0.28681394,  0.13527837, -0.13711606, -0.1294077 ]]]],\n",
       "       dtype=float32),\n",
       " array([-0.00257469, -0.02606781, -0.00176562, -0.05009456,  0.04286956,\n",
       "         0.00101146, -0.01690097, -0.00897286, -0.02579135, -0.00328432,\n",
       "        -0.07469463, -0.01246465,  0.08117051, -0.00375538, -0.08492953,\n",
       "        -0.00796815], dtype=float32),\n",
       " array([[[[-1.82196960e-01,  1.00019239e-01, -1.13325961e-01, ...,\n",
       "           -1.71864808e-01,  5.32813855e-02, -1.21549144e-01],\n",
       "          [-1.37220815e-01, -7.76354736e-03, -9.53859687e-02, ...,\n",
       "            5.64956330e-02, -1.56776622e-01, -9.01713967e-02],\n",
       "          [ 2.76760329e-02,  1.05732925e-01, -2.27492396e-03, ...,\n",
       "           -1.14165530e-01, -4.22134474e-02, -1.21896379e-01],\n",
       "          ...,\n",
       "          [-1.72531366e-01,  3.92526500e-02, -7.95934051e-02, ...,\n",
       "            3.89280319e-02,  8.08832720e-02, -1.61645159e-01],\n",
       "          [ 1.53620899e-01,  4.58261520e-02,  1.02007769e-01, ...,\n",
       "           -7.02134967e-02,  2.80632786e-02, -8.96164551e-02],\n",
       "          [ 3.36290114e-02, -1.19639754e-01, -9.69402269e-02, ...,\n",
       "            6.78476989e-02, -8.81711394e-02, -1.56172380e-01]],\n",
       " \n",
       "         [[-1.66687686e-02, -5.02048177e-04,  1.86608844e-02, ...,\n",
       "           -6.03466928e-02, -8.61727446e-02, -2.22357154e-01],\n",
       "          [-1.75565779e-02, -1.20742783e-01, -6.71327487e-02, ...,\n",
       "           -4.16458584e-02, -5.88231310e-02, -1.79938138e-01],\n",
       "          [-1.85755521e-01, -5.71387820e-02,  9.60541442e-02, ...,\n",
       "            9.30538550e-02, -1.09337289e-02,  6.60707727e-02],\n",
       "          ...,\n",
       "          [-1.69780299e-01,  1.03078842e-01,  1.56129189e-02, ...,\n",
       "           -8.93800706e-02, -5.66341821e-03, -2.52572924e-01],\n",
       "          [ 1.06302492e-01, -6.91339672e-02, -6.12229109e-03, ...,\n",
       "           -1.92576845e-05, -7.47175887e-02, -9.49909687e-02],\n",
       "          [-3.54407616e-02,  7.35779405e-02, -1.34481624e-01, ...,\n",
       "           -4.06923778e-02,  1.52547687e-01, -3.32299992e-02]],\n",
       " \n",
       "         [[-1.04783259e-01,  9.74946171e-02,  1.65540278e-01, ...,\n",
       "            1.67191133e-01, -1.14739925e-01, -6.40325472e-02],\n",
       "          [ 6.38319254e-02,  3.98748405e-02, -1.47106439e-01, ...,\n",
       "           -2.19101891e-01,  1.46121550e-02, -1.28724247e-01],\n",
       "          [-2.19169915e-01, -5.39705083e-02, -2.89697945e-02, ...,\n",
       "            1.51356548e-01, -2.94417851e-02,  2.52563413e-02],\n",
       "          ...,\n",
       "          [-4.13186513e-02, -1.17148003e-02,  1.14901014e-01, ...,\n",
       "           -5.09740934e-02, -3.26985791e-02, -1.47324815e-01],\n",
       "          [-1.41793862e-02, -4.09808718e-02,  6.92147911e-02, ...,\n",
       "            2.00677104e-02, -5.39264828e-02,  1.98574677e-01],\n",
       "          [ 3.36228870e-02, -2.89136060e-02, -2.97265947e-01, ...,\n",
       "           -1.18031994e-01,  8.38766620e-02, -5.30352145e-02]]],\n",
       " \n",
       " \n",
       "        [[[ 7.40322545e-02, -9.82991420e-04,  5.92447780e-02, ...,\n",
       "            2.63054594e-02,  1.37298144e-02,  1.39789820e-01],\n",
       "          [-1.39564916e-01, -5.21433130e-02, -6.71181679e-02, ...,\n",
       "           -3.79808173e-02, -1.20981354e-02,  6.50538653e-02],\n",
       "          [ 1.67304218e-01, -5.76467738e-02,  1.65231451e-01, ...,\n",
       "            5.52166626e-02,  2.88827941e-02,  3.73898307e-03],\n",
       "          ...,\n",
       "          [ 9.92183909e-02,  2.57084016e-02,  1.59927428e-01, ...,\n",
       "            1.25071406e-01,  4.32642698e-02,  1.46312594e-01],\n",
       "          [ 1.33477479e-01,  6.22883216e-02,  4.69261631e-02, ...,\n",
       "            1.22856915e-01, -9.25942436e-02,  1.61390767e-01],\n",
       "          [ 1.39217407e-01,  2.68222205e-02, -5.22636771e-02, ...,\n",
       "           -9.09518749e-02, -1.23173229e-01, -1.97514296e-01]],\n",
       " \n",
       "         [[-3.87078226e-02, -9.00318101e-02,  8.15379545e-02, ...,\n",
       "           -8.10932443e-02,  9.93580595e-02,  8.87318999e-02],\n",
       "          [-4.44573388e-02,  1.08295605e-02, -1.50254324e-01, ...,\n",
       "           -9.14391782e-03, -6.80641904e-02, -1.21369129e-02],\n",
       "          [ 1.09276220e-01,  5.73269837e-02,  7.97900185e-02, ...,\n",
       "           -5.74175753e-02, -3.03498544e-02, -4.76060361e-02],\n",
       "          ...,\n",
       "          [-6.12727404e-02, -1.27850799e-02, -5.63948266e-02, ...,\n",
       "            1.13776103e-01,  9.85083580e-02,  2.60111690e-02],\n",
       "          [ 1.12773165e-01,  7.77253462e-03,  3.33867185e-02, ...,\n",
       "           -2.19790582e-02,  6.45982325e-02,  1.89953968e-01],\n",
       "          [ 3.75772901e-02, -6.17923290e-02, -1.43069088e-01, ...,\n",
       "           -1.22807279e-01, -6.73826709e-02, -1.29176557e-01]],\n",
       " \n",
       "         [[-3.64006042e-01, -9.81958658e-02,  9.29938033e-02, ...,\n",
       "            1.20247968e-01,  9.89008769e-02,  1.12001725e-01],\n",
       "          [-2.13174950e-02, -7.58549869e-02,  3.05286031e-02, ...,\n",
       "           -2.50157565e-01, -2.42626175e-01,  7.33853355e-02],\n",
       "          [-1.69910446e-01, -1.56493455e-01,  6.41747862e-02, ...,\n",
       "            1.06711186e-01,  2.18636226e-02,  2.27926578e-02],\n",
       "          ...,\n",
       "          [-2.06303596e-01, -3.62660214e-02,  5.03108948e-02, ...,\n",
       "            5.02247103e-02,  4.83553819e-02,  2.07018331e-01],\n",
       "          [ 1.52876005e-02,  1.52042219e-02,  1.01935789e-01, ...,\n",
       "           -1.71334110e-02, -1.12052210e-01, -6.06150292e-02],\n",
       "          [ 2.81160235e-01,  9.96036604e-02,  1.93472449e-02, ...,\n",
       "           -2.18159631e-01,  2.07953863e-02, -9.17918384e-02]]],\n",
       " \n",
       " \n",
       "        [[[ 7.33959377e-02, -1.28224969e-01, -4.63453718e-02, ...,\n",
       "           -4.65446450e-02,  8.98126587e-02, -6.37853891e-02],\n",
       "          [-1.98319018e-01, -5.56675196e-02, -4.34259810e-02, ...,\n",
       "           -1.30298431e-03,  7.10963970e-03,  9.03677195e-02],\n",
       "          [ 7.83512294e-02,  5.34912348e-02, -2.69711651e-02, ...,\n",
       "            7.19998404e-02, -1.15979746e-01, -9.81401354e-02],\n",
       "          ...,\n",
       "          [ 2.25616291e-01, -5.55719174e-02,  1.24910630e-01, ...,\n",
       "            1.37999924e-02, -2.68121623e-02, -2.53511388e-02],\n",
       "          [ 1.53926797e-02,  6.27622381e-02, -8.01652372e-02, ...,\n",
       "           -1.40464036e-02,  7.73052871e-02,  1.91959009e-01],\n",
       "          [ 2.79626176e-02,  8.74724835e-02, -6.00369088e-02, ...,\n",
       "           -1.82886422e-01, -1.09821357e-01,  6.62757829e-02]],\n",
       " \n",
       "         [[ 1.32548690e-01, -1.59764383e-02, -7.38204494e-02, ...,\n",
       "           -1.26915678e-01, -8.70433897e-02, -6.53035417e-02],\n",
       "          [-1.18730634e-01, -7.76705518e-02,  2.76819034e-03, ...,\n",
       "            5.85262291e-03,  2.13590786e-02,  7.67206633e-03],\n",
       "          [ 8.96367505e-02, -3.65527645e-02, -5.75970896e-02, ...,\n",
       "           -1.02678835e-01, -6.05412163e-02, -5.05762585e-02],\n",
       "          ...,\n",
       "          [ 7.86692947e-02,  2.01358479e-02,  2.50031669e-02, ...,\n",
       "           -7.52374157e-02,  1.08709289e-02,  3.25553082e-02],\n",
       "          [ 2.83483695e-02, -3.86303179e-02, -1.66307092e-02, ...,\n",
       "            8.50471854e-02, -8.70247781e-02, -6.99845180e-02],\n",
       "          [-1.28532752e-01,  7.58479759e-02,  3.85388471e-02, ...,\n",
       "           -2.75483429e-01, -2.28761926e-01,  1.34608462e-01]],\n",
       " \n",
       "         [[ 9.94170383e-02, -2.45029014e-02, -1.40160486e-01, ...,\n",
       "            1.53058454e-01,  3.70912775e-02,  6.65300488e-02],\n",
       "          [-2.23812401e-01, -8.72439444e-02,  1.12251699e-01, ...,\n",
       "            4.21810430e-03, -4.29636538e-02, -9.00357217e-02],\n",
       "          [ 6.60199597e-02, -8.28794986e-02, -2.12875292e-01, ...,\n",
       "            2.04866067e-01, -9.37486961e-02, -1.22988582e-01],\n",
       "          ...,\n",
       "          [ 1.94128364e-01,  8.18514973e-02, -1.16386972e-01, ...,\n",
       "            6.28770292e-02,  4.92223240e-02,  1.22325160e-02],\n",
       "          [-1.14388593e-01,  9.21236724e-02, -6.59093261e-02, ...,\n",
       "           -4.87682968e-02, -1.93639956e-02,  4.52029333e-02],\n",
       "          [ 1.65478498e-01, -6.63072616e-03, -1.99652873e-02, ...,\n",
       "           -2.00855985e-01,  3.87493940e-03,  6.00566603e-02]]]],\n",
       "       dtype=float32),\n",
       " array([-0.07036756, -0.01957968, -0.0229391 , -0.06058493, -0.03618643,\n",
       "         0.00966831, -0.02525065, -0.068487  , -0.06690152,  0.05768378,\n",
       "        -0.07665784, -0.02833285, -0.12850763, -0.07945472, -0.0647712 ,\n",
       "        -0.08665828,  0.00274474, -0.10307181, -0.02420715, -0.0001537 ,\n",
       "        -0.0397557 ,  0.03923871, -0.114279  , -0.02257439,  0.00016998,\n",
       "         0.0312191 ,  0.04675278, -0.12182831, -0.11207232, -0.06134785,\n",
       "        -0.08392293, -0.12548864], dtype=float32),\n",
       " array([[[[ 4.92844917e-02,  3.87326851e-02, -1.26185179e-01, ...,\n",
       "            8.26730058e-02,  9.09715146e-03, -7.49616399e-02],\n",
       "          [ 5.86952604e-02, -4.40628864e-02,  2.90952958e-02, ...,\n",
       "            8.53977576e-02,  3.56390228e-04, -5.80522455e-02],\n",
       "          [ 1.14146635e-01,  6.72522336e-02, -1.15013734e-01, ...,\n",
       "            6.47089854e-02, -7.92489350e-02, -2.03503319e-03],\n",
       "          ...,\n",
       "          [ 4.23754714e-02,  3.83892134e-02, -2.32797358e-02, ...,\n",
       "           -4.79814447e-02,  3.40758916e-03,  8.27854350e-02],\n",
       "          [-3.50069329e-02,  3.47602107e-02,  3.47196348e-02, ...,\n",
       "           -1.14623969e-03,  6.76699057e-02, -2.37727407e-02],\n",
       "          [ 1.56318452e-02, -3.98278423e-02, -4.91279624e-02, ...,\n",
       "            5.52736782e-02,  1.25062764e-02, -7.22872764e-02]],\n",
       " \n",
       "         [[-9.00050178e-02, -2.39890050e-02, -8.25622827e-02, ...,\n",
       "            4.51002419e-02,  6.25881255e-02, -1.66714806e-02],\n",
       "          [-1.18421204e-01, -6.61994144e-02, -4.44844812e-02, ...,\n",
       "           -3.64268497e-02, -6.27398789e-02, -4.77570221e-02],\n",
       "          [ 8.78254697e-02,  5.91229163e-02, -1.06757231e-01, ...,\n",
       "           -3.08569777e-03,  5.59343137e-02, -4.47942317e-02],\n",
       "          ...,\n",
       "          [-5.13846874e-02,  8.62970203e-03,  4.36068736e-02, ...,\n",
       "           -7.31385127e-02, -5.41847572e-02, -8.66381973e-02],\n",
       "          [ 1.16216451e-01,  2.18358748e-02,  1.08753853e-02, ...,\n",
       "           -5.83411828e-02,  6.78357482e-02, -7.28358105e-02],\n",
       "          [-7.46416152e-02,  8.36152863e-03,  3.54461744e-02, ...,\n",
       "           -4.20020930e-02,  3.87227647e-02, -5.83999045e-02]],\n",
       " \n",
       "         [[-1.63493715e-02, -4.86159660e-02,  6.17571622e-02, ...,\n",
       "            1.27335981e-01, -5.92185147e-02, -6.69907182e-02],\n",
       "          [-1.83854494e-02,  2.64631379e-02, -3.19226161e-02, ...,\n",
       "            2.11536083e-02, -1.71236861e-02,  1.04472063e-01],\n",
       "          [-1.19842745e-01,  6.03614599e-02,  3.96625586e-02, ...,\n",
       "           -9.24402401e-02, -5.60729206e-02,  5.83955199e-02],\n",
       "          ...,\n",
       "          [-8.25497359e-02, -4.85531613e-02,  8.26487839e-02, ...,\n",
       "           -6.27027005e-02, -3.46924923e-02, -9.83577296e-02],\n",
       "          [-5.85545832e-03, -5.67257144e-02, -2.47717649e-02, ...,\n",
       "            3.75047028e-02,  5.78523614e-02, -1.44568995e-01],\n",
       "          [-9.05948430e-02,  4.11061309e-02,  1.12014100e-01, ...,\n",
       "            8.89036525e-03, -7.05606788e-02, -6.28176033e-02]]],\n",
       " \n",
       " \n",
       "        [[[-6.77186670e-03, -8.62159729e-02, -5.17818108e-02, ...,\n",
       "           -1.86808351e-02, -7.36553520e-02, -5.99397533e-02],\n",
       "          [ 3.53434496e-02,  5.03391363e-02, -6.01303056e-02, ...,\n",
       "            3.43198702e-02, -8.21108446e-02,  2.33631209e-02],\n",
       "          [ 1.03768863e-01,  1.63791124e-02,  1.09544061e-02, ...,\n",
       "           -5.60185872e-02,  3.46766459e-03, -5.05305901e-02],\n",
       "          ...,\n",
       "          [-5.35413995e-02,  6.73156232e-02, -6.54651523e-02, ...,\n",
       "            7.44905993e-02, -2.86862999e-02,  5.20941988e-02],\n",
       "          [ 1.58249903e-02,  3.24491523e-02, -2.21259277e-02, ...,\n",
       "            1.81528125e-02, -6.26421198e-02,  6.55099601e-02],\n",
       "          [ 1.11282386e-01,  8.36185515e-02,  4.15582247e-02, ...,\n",
       "            6.53222203e-02,  2.64663212e-02,  5.62209496e-03]],\n",
       " \n",
       "         [[ 9.47012827e-02,  5.82697578e-02,  5.44078909e-02, ...,\n",
       "           -8.33964441e-03,  1.93914101e-02,  6.19562119e-02],\n",
       "          [ 6.79591298e-02, -7.13095665e-02,  4.71897721e-02, ...,\n",
       "           -9.83196893e-04, -5.11820465e-02, -3.23316827e-02],\n",
       "          [ 3.96239460e-02, -4.12019948e-03, -5.77397197e-02, ...,\n",
       "            4.55797650e-04, -5.80889806e-02, -8.12092274e-02],\n",
       "          ...,\n",
       "          [-6.68376535e-02, -6.26110286e-02,  9.81850550e-02, ...,\n",
       "           -1.97869493e-03,  2.95373555e-02, -7.67225921e-02],\n",
       "          [-4.31988277e-02,  7.17101246e-02, -9.76182222e-02, ...,\n",
       "            6.32454008e-02,  1.26676466e-02, -2.96952929e-02],\n",
       "          [-6.70494065e-02,  4.06422019e-02,  1.01080788e-02, ...,\n",
       "            4.86463076e-03,  1.46185700e-02,  4.14145291e-02]],\n",
       " \n",
       "         [[-1.66822180e-01, -4.50340211e-02, -3.24926823e-02, ...,\n",
       "           -1.74854882e-02, -4.76962700e-02, -3.43499966e-02],\n",
       "          [-3.88210230e-02, -4.46853079e-02,  1.01728208e-01, ...,\n",
       "            5.65191396e-02, -8.35095793e-02, -4.23714854e-02],\n",
       "          [ 8.71263519e-02, -1.59261050e-04, -2.51773233e-03, ...,\n",
       "            3.28226760e-02, -5.92421144e-02,  9.91983041e-02],\n",
       "          ...,\n",
       "          [-7.02676550e-02, -6.81056604e-02,  4.29894254e-02, ...,\n",
       "            1.07103109e-01, -8.77965167e-02, -1.29759731e-02],\n",
       "          [-9.74996015e-02,  2.34433059e-02,  2.77212765e-02, ...,\n",
       "           -5.32138422e-02, -3.70118842e-02, -1.25174627e-01],\n",
       "          [ 7.65310079e-02, -8.97081718e-02,  2.50931792e-02, ...,\n",
       "            3.15050445e-02,  2.23833434e-02,  9.98565480e-02]]],\n",
       " \n",
       " \n",
       "        [[[-5.81557080e-02, -3.92341316e-02, -1.69316381e-02, ...,\n",
       "            1.38863584e-03,  3.27283181e-02,  8.15411210e-02],\n",
       "          [-1.25768468e-01, -4.60665263e-02,  8.27575177e-02, ...,\n",
       "            4.89915125e-02, -3.45508270e-02,  6.31730258e-02],\n",
       "          [ 1.99992713e-02, -6.58468902e-02,  1.33267427e-02, ...,\n",
       "            5.58516942e-02, -3.34289228e-03, -3.56041901e-02],\n",
       "          ...,\n",
       "          [ 1.05759621e-01, -3.59580033e-02, -3.92197706e-02, ...,\n",
       "           -6.56783879e-02, -8.53438601e-02,  6.51353598e-02],\n",
       "          [ 4.16837968e-02,  2.95646731e-02, -9.88308247e-03, ...,\n",
       "           -1.03242965e-02,  5.95582239e-02,  3.28275189e-02],\n",
       "          [ 4.27653790e-02,  5.31672090e-02, -6.61871731e-02, ...,\n",
       "           -7.87372366e-02,  4.58413437e-02, -4.91052419e-02]],\n",
       " \n",
       "         [[-6.51396289e-02, -9.10305604e-02, -4.76035625e-02, ...,\n",
       "           -1.06974825e-01, -7.80577660e-02, -4.39470187e-02],\n",
       "          [ 4.68676873e-02,  8.55719950e-03, -5.25701828e-02, ...,\n",
       "           -6.29677996e-02, -3.76374759e-02, -9.14514810e-03],\n",
       "          [ 6.26576915e-02, -8.34657997e-02,  3.12821791e-02, ...,\n",
       "           -1.39979497e-01,  1.13904215e-02, -7.32120797e-02],\n",
       "          ...,\n",
       "          [-8.77054557e-02,  5.86774647e-02,  3.38728130e-02, ...,\n",
       "           -2.74901893e-02, -8.14713724e-03,  3.42459045e-02],\n",
       "          [ 3.31154722e-03, -1.37708401e-02,  2.43899450e-02, ...,\n",
       "            2.27694083e-02,  7.07988217e-02, -6.79803360e-03],\n",
       "          [ 2.10707560e-02,  7.46093988e-02, -1.17591880e-02, ...,\n",
       "            2.19310131e-02,  1.19208237e-02, -2.49923263e-02]],\n",
       " \n",
       "         [[ 1.65850058e-01, -2.04107556e-02, -1.03236064e-01, ...,\n",
       "           -8.67112502e-02, -4.70335782e-02,  1.20011270e-01],\n",
       "          [-6.47349060e-02, -3.80326398e-02,  3.18266116e-02, ...,\n",
       "           -6.08986802e-02, -4.86208647e-02, -1.53486049e-02],\n",
       "          [-1.14170544e-01, -7.16931894e-02,  8.17788169e-02, ...,\n",
       "            3.18723582e-02,  4.36735190e-02,  3.24824825e-02],\n",
       "          ...,\n",
       "          [-1.02162391e-01, -8.09403732e-02,  7.02442452e-02, ...,\n",
       "           -6.26698136e-02,  2.24458594e-02, -8.25694650e-02],\n",
       "          [ 5.75124621e-02,  1.54318335e-03,  5.30193932e-03, ...,\n",
       "            4.29509208e-02, -1.84950177e-02, -2.50387583e-02],\n",
       "          [-5.18109538e-02, -4.57713380e-02, -2.19715778e-02, ...,\n",
       "           -2.88220793e-02,  8.29669181e-03, -5.53701967e-02]]]],\n",
       "       dtype=float32),\n",
       " array([ 0.01470017, -0.00292235,  0.03605389, -0.00859975, -0.00326525,\n",
       "         0.00332229, -0.00895856,  0.01446751, -0.05498852,  0.00763234,\n",
       "        -0.0159644 , -0.04027444,  0.01238929,  0.0236074 ,  0.02601724,\n",
       "         0.0077927 ,  0.01365799, -0.00027937, -0.01564406, -0.00723848,\n",
       "        -0.0032966 ,  0.01104393,  0.00086068,  0.00944189,  0.01789316,\n",
       "        -0.02118636,  0.01004268,  0.00940785, -0.01010846, -0.00016606,\n",
       "        -0.02118133,  0.0087463 , -0.01070319, -0.00110841, -0.03218457,\n",
       "        -0.00644668, -0.01363708, -0.01406678,  0.00396688, -0.0239002 ,\n",
       "        -0.00293033,  0.02117111,  0.01887141, -0.01652339,  0.00659259,\n",
       "         0.01267935, -0.03344189, -0.0124927 ,  0.02009865, -0.02873652,\n",
       "         0.0050327 ,  0.00186823, -0.00916088, -0.00261868,  0.01240709,\n",
       "        -0.01545327,  0.01348762,  0.01166471,  0.01395644,  0.00340555,\n",
       "        -0.01308602, -0.00664401, -0.01013297, -0.01219094], dtype=float32),\n",
       " array([[-0.01981297, -0.0177095 ,  0.02480348, ...,  0.142903  ,\n",
       "          0.05878055, -0.07010707],\n",
       "        [-0.01555287,  0.07318956, -0.17220892, ..., -0.06052587,\n",
       "         -0.1461233 ,  0.00594369],\n",
       "        [ 0.14889576, -0.0607813 , -0.17502174, ..., -0.1115768 ,\n",
       "         -0.02558637, -0.06286082],\n",
       "        ...,\n",
       "        [ 0.06154454,  0.14682175,  0.18659234, ..., -0.09208879,\n",
       "         -0.13263723,  0.07171223],\n",
       "        [-0.03818134, -0.00083688,  0.15059268, ...,  0.08286018,\n",
       "          0.11106187, -0.06293749],\n",
       "        [ 0.11718242,  0.04759806, -0.15323915, ..., -0.1607072 ,\n",
       "         -0.01442026,  0.07848734]], dtype=float32),\n",
       " array([ 7.78552704e-03, -2.10584532e-02, -2.04213802e-02, -1.73258502e-02,\n",
       "        -1.42550305e-03,  2.02649599e-03, -5.01822308e-03, -1.59625690e-02,\n",
       "         1.19549911e-02,  3.37712541e-02, -2.26836931e-03,  1.51217058e-02,\n",
       "         3.94871682e-02,  9.56352986e-03, -1.38002411e-02,  3.34691145e-02,\n",
       "         1.62859447e-02,  9.67961363e-03, -1.35206459e-02, -1.70355830e-02,\n",
       "         1.33084645e-03, -2.37537101e-02,  1.51567701e-02,  7.85453059e-03,\n",
       "         5.79132698e-02,  1.14902938e-02,  3.75497248e-03, -1.20289680e-02,\n",
       "         1.92046985e-02, -2.43949872e-02, -8.26611277e-03, -4.57636034e-03,\n",
       "        -1.71377826e-02,  1.88562460e-02, -2.92917900e-03,  2.54606450e-04,\n",
       "        -1.50398780e-02,  2.24379208e-02,  3.04079875e-02, -3.11361719e-03,\n",
       "         5.51187852e-03,  1.00033358e-02,  1.57246254e-02,  2.58633886e-02,\n",
       "         5.59344015e-04,  2.27274764e-02,  1.75436325e-02, -7.55103491e-03,\n",
       "        -1.31937228e-02,  4.47314195e-02, -8.30054190e-03, -1.87395141e-02,\n",
       "        -1.82904042e-02,  4.92472993e-03, -1.52894007e-02,  2.26791501e-02,\n",
       "        -7.80171342e-03, -4.46517114e-03, -2.76009589e-02,  7.01736985e-03,\n",
       "         2.95913150e-03, -1.10973660e-02,  2.15817615e-03,  8.07801355e-03,\n",
       "         3.28920753e-04, -3.10733914e-02,  4.42996621e-02, -1.95894558e-02,\n",
       "         1.12272818e-02,  2.50874553e-02,  1.32452725e-02, -1.33710969e-02,\n",
       "         2.64354609e-02, -1.10852979e-02,  1.36331627e-02, -8.03742371e-03,\n",
       "         6.34379918e-04, -1.60758197e-02,  2.31445860e-02, -8.95180926e-03,\n",
       "        -3.41504114e-03, -1.65153425e-02,  8.78288504e-03,  8.16326123e-03,\n",
       "         3.11492495e-02,  4.13820520e-03, -1.87951059e-03,  5.48046781e-03,\n",
       "         3.07417568e-03,  5.96945966e-03,  8.97405297e-03,  1.90485641e-02,\n",
       "         8.50194227e-03,  9.18883272e-03,  1.43327564e-03, -6.55511394e-03,\n",
       "        -2.01037563e-02, -5.70011185e-03,  4.17381562e-02,  2.78294627e-02,\n",
       "         5.36828898e-02, -1.24559775e-02,  1.05073219e-02, -1.92471724e-02,\n",
       "        -3.69328097e-03,  2.24770885e-02,  4.67122234e-02, -1.67208537e-02,\n",
       "         1.76387001e-02, -1.51747779e-03, -1.62506138e-03,  1.74659509e-02,\n",
       "         3.49671487e-03,  1.01691326e-02,  8.33086018e-03,  6.42046193e-03,\n",
       "        -1.28165120e-05,  1.33220395e-02,  1.44617939e-02,  1.70309208e-02,\n",
       "        -2.34853625e-02,  2.29722615e-02,  3.58839370e-02, -4.15104255e-03,\n",
       "        -2.46377606e-02,  2.23542787e-02, -6.88930321e-03, -1.55502046e-03],\n",
       "       dtype=float32),\n",
       " array([[ 0.17307967, -0.32371277,  0.03920451, ...,  0.13835411,\n",
       "         -0.03220792, -0.16540061],\n",
       "        [-0.04996043, -0.14511515,  0.16048041, ...,  0.13329789,\n",
       "         -0.052797  ,  0.0117856 ],\n",
       "        [-0.20398894, -0.21627979,  0.12695716, ...,  0.16909869,\n",
       "         -0.01108464,  0.13745505],\n",
       "        ...,\n",
       "        [ 0.23471685, -0.0043794 ,  0.0870733 , ..., -0.19046357,\n",
       "          0.04697207, -0.06968647],\n",
       "        [-0.3753679 ,  0.03178958,  0.04054589, ...,  0.09850176,\n",
       "         -0.16861379,  0.19649258],\n",
       "        [-0.11726879, -0.32545626, -0.13024226, ...,  0.09569545,\n",
       "          0.02844129, -0.15987484]], dtype=float32),\n",
       " array([ 0.01403175,  0.00782897,  0.01342798,  0.00268995, -0.02223596,\n",
       "         0.02432384, -0.01008549, -0.04844296,  0.03726049, -0.00013286],\n",
       "       dtype=float32)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w=model.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[ 0.13316604,  0.25612712,  0.1708932 ,  0.23264349,\n",
       "           0.4081227 , -0.00369734,  0.25345826, -0.00442866,\n",
       "          -0.13031518,  0.4004527 ,  0.14400333,  0.01875131,\n",
       "          -0.17739765,  0.14622629, -0.22484899,  0.25729474]],\n",
       "\n",
       "        [[ 0.33630648,  0.16482393, -0.00994146,  0.26147056,\n",
       "           0.44077203,  0.19847132,  0.10700923, -0.17181826,\n",
       "          -0.13547742, -0.10436176,  0.17531002, -0.24341434,\n",
       "          -0.16536362,  0.3227159 , -0.02095933,  0.00326348]],\n",
       "\n",
       "        [[ 0.4773408 , -0.20780298,  0.28647426, -0.08869514,\n",
       "           0.43776247, -0.22310187,  0.13063326, -0.18730241,\n",
       "           0.01324545, -0.36467966, -0.2721021 , -0.11974656,\n",
       "          -0.20306736,  0.2132155 ,  0.0939412 , -0.46750453]]],\n",
       "\n",
       "\n",
       "       [[[-0.07585941,  0.18729809, -0.0319526 ,  0.2590525 ,\n",
       "          -0.15075122,  0.12950328,  0.10624994, -0.0341487 ,\n",
       "          -0.18925084,  0.3175748 ,  0.03503422,  0.27080134,\n",
       "          -0.19572842,  0.18008478, -0.05908436,  0.36901507]],\n",
       "\n",
       "        [[ 0.20010836,  0.09381519,  0.08738995,  0.24816793,\n",
       "           0.02162969,  0.26138008,  0.13281058,  0.17421076,\n",
       "           0.02269791, -0.09459153,  0.25266722,  0.00822565,\n",
       "          -0.22380193,  0.22229178,  0.12998343, -0.10543611]],\n",
       "\n",
       "        [[ 0.473236  , -0.2954367 ,  0.3648915 ,  0.04142062,\n",
       "          -0.06949302,  0.17677005,  0.2142962 , -0.1697354 ,\n",
       "          -0.02168106, -0.15910842, -0.35486245,  0.05965512,\n",
       "          -0.07265774,  0.38829508,  0.06893273, -0.4415897 ]]],\n",
       "\n",
       "\n",
       "       [[[-0.1966835 ,  0.23937258,  0.13709085,  0.18574235,\n",
       "          -0.3097861 ,  0.38510764,  0.199076  , -0.01683646,\n",
       "          -0.02942958,  0.24770232,  0.31129363,  0.20949113,\n",
       "           0.25628236, -0.30739474,  0.233423  ,  0.33681223]],\n",
       "\n",
       "        [[ 0.15743347, -0.25384092,  0.04763749,  0.10689101,\n",
       "          -0.47876278,  0.43768224,  0.1714572 , -0.11244971,\n",
       "           0.0576377 , -0.35485604,  0.00289941,  0.07844939,\n",
       "           0.39413008,  0.05539849,  0.21490309,  0.34792024]],\n",
       "\n",
       "        [[ 0.03181607, -0.22985025,  0.39628243, -0.05534835,\n",
       "          -0.3437146 ,  0.47401577,  0.09108053, -0.13630661,\n",
       "          -0.09324652, -0.43840078, -0.03474376,  0.19259527,\n",
       "           0.28681394,  0.13527837, -0.13711606, -0.1294077 ]]]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.get_weights()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "w=model.get_weights()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 1 is out of bounds for axis 2 with size 1",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-31-7534f2ab6854>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m         \u001b[0mneww\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m: index 1 is out of bounds for axis 2 with size 1"
     ]
    }
   ],
   "source": [
    "for i in range (1,3):\n",
    "    for j in range (1,3):\n",
    "        neww=w[i,j,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.03181607 -0.22985025  0.39628243 -0.05534835 -0.3437146   0.47401577\n",
      "  0.09108053 -0.13630661 -0.09324652 -0.43840078 -0.03474376  0.19259527\n",
      "  0.28681394  0.13527837 -0.13711606 -0.1294077 ]\n"
     ]
    }
   ],
   "source": [
    "print (neww)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(neww.reshape(4,4),cmap='gray')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(neww.reshape(4,4),cmap='gray')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 1 is out of bounds for axis 2 with size 1",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-36-931e69426e6c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m         \u001b[0mneww\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m: index 1 is out of bounds for axis 2 with size 1"
     ]
    }
   ],
   "source": [
    "for i in range (1,3):\n",
    "    for j in range (1,3):\n",
    "        neww=w[0,0,1,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.13316604\n"
     ]
    }
   ],
   "source": [
    "print (neww)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 1 is out of bounds for axis 2 with size 1",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-37-931e69426e6c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m         \u001b[0mneww\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m: index 1 is out of bounds for axis 2 with size 1"
     ]
    }
   ],
   "source": [
    "for i in range (1,3):\n",
    "    for j in range (1,3):\n",
    "        neww=w[0,0,1,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 1 is out of bounds for axis 2 with size 1",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-38-76dd72c33f71>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mneww\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m: index 1 is out of bounds for axis 2 with size 1"
     ]
    }
   ],
   "source": [
    "neww=w[0,0,1,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "neww=w[0,0,0,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.25612712\n"
     ]
    }
   ],
   "source": [
    "print (neww)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4773408\n"
     ]
    }
   ],
   "source": [
    "neww=w[0,2,0,0]\n",
    "print (neww)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'numpy.float32' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-46-14acb68640e9>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m         \u001b[0mneww\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'numpy.float32' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "for i in range (0,2):\n",
    "    for j in range (0,2):\n",
    "        neww[i,j]=w[i,j,0,0]\n",
    "        \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.20010836\n"
     ]
    }
   ],
   "source": [
    "neww=w[0,0,1,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "w=model.layers[0].get_weights()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[ 0.13316604  0.25612712  0.1708932   0.23264349  0.4081227\n",
      "    -0.00369734  0.25345826 -0.00442866 -0.13031518  0.4004527\n",
      "     0.14400333  0.01875131 -0.17739765  0.14622629 -0.22484899\n",
      "     0.25729474]]\n",
      "\n",
      "  [[ 0.33630648  0.16482393 -0.00994146  0.26147056  0.44077203\n",
      "     0.19847132  0.10700923 -0.17181826 -0.13547742 -0.10436176\n",
      "     0.17531002 -0.24341434 -0.16536362  0.3227159  -0.02095933\n",
      "     0.00326348]]\n",
      "\n",
      "  [[ 0.4773408  -0.20780298  0.28647426 -0.08869514  0.43776247\n",
      "    -0.22310187  0.13063326 -0.18730241  0.01324545 -0.36467966\n",
      "    -0.2721021  -0.11974656 -0.20306736  0.2132155   0.0939412\n",
      "    -0.46750453]]]\n",
      "\n",
      "\n",
      " [[[-0.07585941  0.18729809 -0.0319526   0.2590525  -0.15075122\n",
      "     0.12950328  0.10624994 -0.0341487  -0.18925084  0.3175748\n",
      "     0.03503422  0.27080134 -0.19572842  0.18008478 -0.05908436\n",
      "     0.36901507]]\n",
      "\n",
      "  [[ 0.20010836  0.09381519  0.08738995  0.24816793  0.02162969\n",
      "     0.26138008  0.13281058  0.17421076  0.02269791 -0.09459153\n",
      "     0.25266722  0.00822565 -0.22380193  0.22229178  0.12998343\n",
      "    -0.10543611]]\n",
      "\n",
      "  [[ 0.473236   -0.2954367   0.3648915   0.04142062 -0.06949302\n",
      "     0.17677005  0.2142962  -0.1697354  -0.02168106 -0.15910842\n",
      "    -0.35486245  0.05965512 -0.07265774  0.38829508  0.06893273\n",
      "    -0.4415897 ]]]\n",
      "\n",
      "\n",
      " [[[-0.1966835   0.23937258  0.13709085  0.18574235 -0.3097861\n",
      "     0.38510764  0.199076   -0.01683646 -0.02942958  0.24770232\n",
      "     0.31129363  0.20949113  0.25628236 -0.30739474  0.233423\n",
      "     0.33681223]]\n",
      "\n",
      "  [[ 0.15743347 -0.25384092  0.04763749  0.10689101 -0.47876278\n",
      "     0.43768224  0.1714572  -0.11244971  0.0576377  -0.35485604\n",
      "     0.00289941  0.07844939  0.39413008  0.05539849  0.21490309\n",
      "     0.34792024]]\n",
      "\n",
      "  [[ 0.03181607 -0.22985025  0.39628243 -0.05534835 -0.3437146\n",
      "     0.47401577  0.09108053 -0.13630661 -0.09324652 -0.43840078\n",
      "    -0.03474376  0.19259527  0.28681394  0.13527837 -0.13711606\n",
      "    -0.1294077 ]]]]\n"
     ]
    }
   ],
   "source": [
    "print (w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 63 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "new1=model.get_weights()[0][:,:,0,:]\n",
    "new2=model.get_weights()[2][:,:,0,:]\n",
    "new3=model.get_weights()[4][:,:,0,:]\n",
    "\n",
    "for i in range (1,16):\n",
    "    plt.subplot(4,4,i)\n",
    "    plt.imshow(new1[:,:,i], cmap='gray')\n",
    "\n",
    "    \n",
    "for i in range (1,32):\n",
    "    plt.subplot(6,6,i)\n",
    "    plt.imshow(new2[:,:,i],cmap='gray')\n",
    "    \n",
    "    \n",
    "for i in range (1,64):\n",
    "    plt.subplot(8,8,i)\n",
    "    plt.imshow(new3[:,:,i],cmap='gray')\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 15 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for i in range (1,16):\n",
    "    plt.subplot(4,4,i)\n",
    "    plt.imshow(new1[:,:,i], cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 31 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range (1,32):\n",
    "    plt.subplot(6,6,i)\n",
    "    plt.imshow(new2[:,:,i],cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 63 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range (1,64):\n",
    "    plt.subplot(8,8,i)\n",
    "    plt.imshow(new3[:,:,i],cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2a662053518>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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EdknIuMATAUwSES2ARgUOaYcwrr6i7UNr7hDLkqpO6KkBgbclpQzp5C5wnZ1qE91nTVrlo6vuuoqK/fggw/q+IknnrByK1as0LG7Yl8snTp1so4nTZqk4/vuuy/h53n33Xd1PGXKlIQfF48vtT1y5IiO16xZY+UOHDig4/79+1u53bt369jcbCIed+jG3Hw61qqdri1btujYvFI4HXilKBGRJ9ihExF5gh06EZEnQrVJtDmFyF0FbdmyZTrevHmzlTOnO7qXj591lv1/4u+//65jcywPAEpLS3U8b948K3fq1KmYbQ+ar5sJu+Og77zzjo779Olj5davX69jc7wUAAoLC61jc9z8jTfesHIFBQVR22NuUrxw4UIrZ+7CYy490Rg+1fWRRx7RsblSKgD06HFmv+Szzz7bypl/gx9//LGVu/DCC61js3YDB9pfMZirc5qvFcDemaq6utrKmec8efIkAsJNoomIwoQdOhGRJ0I15LJ//34dt27d2sol+3uINTwTiztN7dlnn03q/Mny6aN5LOYVfuY0RcBecXPr1q1Wzh1yMT+qu68Vc3XOl156ycrNmDFDx+lY3dGnuppDLueff76VO+ecc3RsbhQC2Cszuiunups9t23bVsduXc1VG59++mkrN3369KjPmSIcciEiChN26EREnmCHTkTkiVBtEh3LsWPHdPzZZ59ZOXOKoXspsTsua25mO368vaz0zTffrONnnnnGypkrxLnT2yh55gqLsaYXupfzu7799lsdP/TQQ1bOnKYW1PRDiq1jx446dlc0/OSTT3R8/PhxK+dOJTZfE999952VM8fpmzSxu0pzVc1NmzYl2uyU4zt0IiJPsEMnIvIEO3QiIk+Eagx97ty5On700Uet3FtvvaXj+++/P+lzVFZW6njVqlVWzlza1RwDBIB27dolfc6wGTx4sHV877336viWW25JyTlnzpypY3M5AQpOhw4drGPzew13WWJzV7ElS5Ykfc4FCxbo2LzUH7C/A3OXlGjevHnS50wlvkMnIvIEO3QiIk+EasjFvQzY1LNnz8DP505hW7lypY7dIRcC2rRpo+MHHnjAypnDKu5KmeYl2+7l2+aOMR9++KGVMzdmfuGFF6ycuSwAADz55JM6Li8vt3Lff/89KLoLLrhAx+YqiYC9E5C7iXZxcXHU5zQvt3frai7x4e5S5q7a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\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,3,1)\n",
    "plt.imshow(x_test[21].reshape(28,28),cmap='gray')\n",
    "plt.subplot(1,3,2)\n",
    "plt.imshow(x_test[61].reshape(28,28),cmap='gray')\n",
    "newim=(x_test[21]+x_test[61])/2\n",
    "plt.subplot(1,3,3)\n",
    "plt.imshow(newim.reshape(28,28),cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "val=model.predict(newim.reshape(1,28,28,1))\n",
    "print (val.argmax())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer_outputs = [layer.output for layer in model.layers[:12]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "activation_model = models.Model(inputs=model.input, outputs=layer_outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "activations = activation_model.predict(newim.reshape(1,28,28,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2a662392860>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "first_layer_activation = activations[0]\n",
    "second_layer_activation=activations[2]\n",
    "third_layer_activation=activations[4]\n",
    "plt.subplot(1,3,1)\n",
    "plt.imshow(first_layer_activation[0, :, :, 4], cmap='gray')\n",
    "plt.subplot(1,3,2)\n",
    "plt.imshow(second_layer_activation[0, :, :, 4], cmap='gray')\n",
    "plt.subplot(1,3,3)\n",
    "plt.imshow(third_layer_activation[0, :, :, 4], cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
